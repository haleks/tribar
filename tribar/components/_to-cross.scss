// Haleks â€” Tribar
// https://haleks.ca
// Licensed under MIT Open Source


// To Cross
// ========
@import "global";


// Mixins
// ------

//  Mixin: burger-to-cross($options)
//    @params $options [ map ]: Multiple options used to create a burger to arrow animation

@mixin burger-to-cross($options: ()) {
    // Merge defaults with options
    $settings: map-merge((
        width: $tribar-width,
        thickness: $tribar-thickness,
        gutter: $tribar-gutter,
        color: $tribar-color,
        rotation: 45,
        contour: none,
        full: false,
        reverse: false
    ), $options);

    // Variables
    $rotation: get-cross-degrees(map-get($settings, rotation), map-get($settings, reverse));
    $size: get-cross-size(map-get($settings, width), map-get($settings, thickness), map-get($settings, gutter));
    $y: get-cross-y(map-get($settings, width), map-get($settings, thickness), map-get($settings, gutter),  map-get($settings, contour));
    $x: get-cross-x(map-get($settings, width), map-get($settings, thickness), map-get($settings, gutter),  map-get($settings, contour));
    $scaleX: get-cross-scale(map-get($settings, width), map-get($settings, thickness), map-get($settings, gutter),  map-get($settings, contour), map-get($settings, full));


    & {
        background-color: transparent;

        @if map-get($settings, contour) != none {
            width: $size;
            height: $size;
            max-height: $size;

            border: map-get($settings, thickness) solid map-get($settings, color);

            @if map-get($settings, contour) == circle {
                border-radius: 50%;
            }

            @include burger-transform((x: (map-get($settings, width) / 2) - ($size / 2), y: -($size - map-get($settings, thickness)) / 2, degrees: 0deg));
        }
    }

    &:before {
        @include burger-transform((x: map-get($x, before), y: map-get($y, before), degrees: map-get($rotation, before), scaleX: $scaleX));
    }

    &:after {
        @include burger-transform((x: map-get($x, after), y: map-get($y, after), degrees: map-get($rotation, after), scaleX: $scaleX));
    }
}


// Presets
// -------


// To Cross
// --------

//  Mixin: burger-to-cross-reverse

@mixin burger-to-cross-reverse {
    @include burger-to-cross((reverse: true))
}


// Squared
// -------

//  Mixin: burger-to-cross-squared

@mixin burger-to-cross-squared {
    @include burger-to-cross((contour: square));
}

//  Mixin: burger-to-cross-squared-reverse

@mixin burger-to-cross-squared-reverse {
    @include burger-to-cross((contour: square, reverse: true));
}

//  Mixin: burger-to-cross-squared-full

@mixin burger-to-cross-squared-full {
    @include burger-to-cross((contour: square, full: true));
}

//  Mixin: burger-to-cross-squared-full-reverse

@mixin burger-to-cross-squared-full-reverse {
    @include burger-to-cross((contour: square, full: true, reverse: true));
}


// Circled
// -------

//  Mixin: burger-to-cross-circled

@mixin burger-to-cross-circled {
    @include burger-to-cross((contour: circle));
}

//  Mixin: burger-to-cross-circled-reverse

@mixin burger-to-cross-circled-reverse {
    @include burger-to-cross((contour: circle, reverse: true));
}

//  Mixin: burger-to-cross-circled-full

@mixin burger-to-cross-circled-full {
    @include burger-to-cross((contour: circle, full: true));
}

//  Mixin: burger-to-cross-circled-full-reverse

@mixin burger-to-cross-circled-full-reverse {
    @include burger-to-cross((contour: circle, full: true, reverse: true));
}

// Haleks â€” Tribar
// https://haleks.ca
// Licensed under MIT Open Source

//
// Functions
// - - - - - - - - - - - - - - - - - - - - - - - - -

//
// Global
//

//  Function: get-degrees($degrees, $clockwise)
//    @params $degrees [ number ]: Degrees in unitless number used for the rotation
//    @params $clockwise [ bool ]: Clockwise boolean to determine clockwise or counter-clockwise

@function get-degrees($degrees, $clockwise: true) {
    @if $clockwise {
        @return #{$degrees}deg;
    }

    @return -#{$degrees}deg;
}

//
// To Arrows
//

//  Function: get-cycle($cycle, $direction, $rotation)
//    @params $cycle [ bool ]: Top and bottom parts make a rotation while forming arrow
//    @params $direction [ string ]: The direction of the arrow
//    @params $rotation [ number ]: The degrees of the rotation

@function get-cycle($cycle, $direction, $rotation) {
    @if $direction == right {
        @if $rotation == 0 {
            @if $cycle {
                @return 135deg;
            }

            @return -45deg;
        } @else {
            @if $cycle {
                @return -135deg;
            }

            @return 45deg;
        }
    } @else if $direction == left {
        @if $rotation == 0 {
            @if $cycle {
                @return -135deg;
            }

            @return 45deg;
        } @else {
            @if $cycle {
                @return 135deg;
            }

            @return -45deg;
        }
    }

    @return 0deg;
}

//  Function: get-arrow-x($width, $thickness, $gutter, $direction, $rotation)
//    @params $width [ number ]: The width of the burger icon
//    @params $thickness [ number ]: The thickness of the burger icon
//    @params $gutter [ number ]: The gutter of the burger icon
//    @params $direction [ string ]: The direction of the arrow
//    @params $rotation [ number ]: The degrees of the rotation

@function get-arrow-x($width, $thickness, $gutter, $direction, $rotation) {
    $side: get-leg($width / 2);
    $height: get-leg($thickness);

    $x: ($width / 2) - ($side - $height);

    @if $direction == right {
        @if $rotation == 0 {
            @return $x;
        } @else {
            @return -$x;
        }
    } @else if $direction == left {
        @if $rotation == 0 {
            @return -$x;
        } @else {
            @return $x;
        }
    }

    @return $x;
}

//  Function: get-arrow-y($width, $thickness, $gutter)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation
//    @params $clockwise [ bool ]: Multiple options used to create a burger to arrow animation

@function get-arrow-y($width, $thickness, $gutter) {
    $side: get-leg($width / 2);
    $height: get-leg($thickness);

    $y: ($thickness + $gutter) - ($side - $height);

    @return $y;
}

//
// To Cross
//

//  Function: get-cross-degrees($degrees, $reverse)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation
//    @params $clockwise [ bool ]: Multiple options used to create a burger to arrow animation

@function get-cross-degrees($degrees, $reverse) {
    @if $reverse {
        $before: get-degrees($degrees);
        $after: get-degrees($degrees, false);
    } @else {
        $before: get-degrees($degrees, false);
        $after: get-degrees($degrees);
    }

    @return (before: $before, after: $after);
}

//  Function: get-cross-size($width, $thickness, $gutter)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation
//    @params $clockwise [ bool ]: Multiple options used to create a burger to arrow animation

@function get-cross-size($width, $thickness, $gutter) {
    $height: ($thickness * 3) + ($gutter * 2);

    @if $width > $height {
        @return $width;
    }

    @return $height;
}

//  Function: get-cross-x($width, $thickness, $gutter, $contour)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation
//    @params $clockwise [ bool ]: Multiple options used to create a burger to arrow animation

@function get-cross-x($width, $thickness, $gutter, $contour) {
    $size: get-cross-size($width, $thickness, $gutter);

    @if $contour != none {
        @if $size == $width {
            $x: ($size - $width) - $thickness;
        } @else {
            $x: ($size - $width) / 2 - $thickness;
        }


        @return (before: $x, after: $x);
    }

    @return (before: 0, after: 0);
}

//  Function: get-cross-y($width, $thickness, $gutter, $contour)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation
//    @params $clockwise [ bool ]: Multiple options used to create a burger to arrow animation

@function get-cross-y($width, $thickness, $gutter, $contour) {
    $y: $thickness + $gutter;

    @if $contour != none {
        $hypotenuse: get-hypotenuse($thickness);
        $size: get-cross-size($width, $thickness, $gutter) - ($thickness * 2);

        $before: $y + ($size / 2) - ($thickness / 2);
        $after: $y - ($size / 2) + ($thickness / 2);

        @return (before: $before, after: -$after);
    }

    @return (before: $y, after: -$y);
}

//  Function: get-cross-scale($width, $thickness, $gutter, $contour, $full)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation
//    @params $clockwise [ bool ]: Multiple options used to create a burger to arrow animation

@function get-cross-scale($width, $thickness, $gutter, $contour, $full) {
    $size: get-cross-size($width, $thickness, $gutter);

    @if $contour == circle {
        @if $full {
            @return $size / $width;
        }

        @return $size / ($width + $thickness * 4);

    } @else if $contour == square {
        @if $full {
            $hypotenuse: get-hypotenuse($size);

            @return $hypotenuse / ($width + $thickness * 2);
        }

        @return $size / ($width + $thickness * 2);
    }

    @return 1;
}

//
// Triangle
//

//  Function: get-sqrt2

@function get-sqrt2() {
    @return 1.41421356237;
}

//  Function: get-leg($hypothenuse)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation

@function get-leg($hypothenuse) {
    @return ($hypothenuse / 2) / get-sqrt2();
}

//  Function: get-hypotenuse($side)
//    @params $degrees [ number ]: Multiple options used to create a burger to arrow animation

@function get-hypotenuse($side) {
    @return $side * get-sqrt2();
}

{"version":3,"sources":["core/_global.scss","components/_tribar.scss","core/_functions.scss"],"names":[],"mappings":"AA4EkB;EClDhB,YDPe;ECQf,YDPkB;ECQlB,gBDRkB;ECUlB,uBDNe;ECQf,8BAA8B;EAC3B,iBDXU;ECab,iBDZgB;EAkJd,0BEkFsB,EF/KA;;AAoBtB;ECvDF,gBAAmB;EACb,mBAAsB,EDsDvB;;AAoBQ;ECtEb,mBAAmB;EACnB,YAAY,EDqES;;AA9BlB;ECnCH,UAAc,EDmCF;;AAoBT;ECnDH,SAAY,EDmDD","file":"tribar.css","sourceRoot":"/source/","sourcesContent":["// Haleks — Tribar\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Global\n// ======\n@import 'functions';\n\n// Variables\n// ---------\n\n// Generate the animations classes.\n$tribar-include-class: true !default;\n\n// Tribar global default map.\n// This map is used to merge missing map keys and values of each the\n// of the properties variables set in the settings.\n$tribar-global-properties: (\n    'width': 30px,\n    'thickness': 3px,\n    'gutter': 6px,\n    'radius': 0,\n    'shadow': none,\n    'color': #aaa,\n    'hover': darken(#aaa, 20%),\n    'transition': ((\n        'delay': 0,\n        'duration': 1s,\n        'function': 'ease',\n        'property': 'all'\n    )),\n) !global;\n\n// Set default for all animations and make sure all properties are merged.\n$tribar-default-properties: $tribar-global-properties !default;\n$tribar-default-properties: map-merge($tribar-global-properties, $tribar-default-properties);\n\n// Tribar global default map.\n// This map is used to merge missing map keys and values of each the\n// of the properties variables set in the settings.\n$tribar-global-transform-properties: (\n    'x': 0,\n    'y': 0,\n    'rotate': 0deg,\n    'scaleX': 1,\n    'scaleY': 1,\n    'matrix': (0, 0, 0, 0, 0, 0),\n    'matrix3d': (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n) !global;\n\n// Set default for all animations and make sure all properties are merged.\n$tribar-default-transform-properties: $tribar-global-transform-properties !default;\n$tribar-default-transform-properties: map-merge($tribar-global-transform-properties, $tribar-default-transform-properties);\n\n// Tribar global default map.\n// This map is used to merge missing map keys and values of each the\n// of the properties variables set in the settings.\n$tribar-global-transition-properties: map-get($tribar-default-properties, 'transition') !global;\n\n// Set default for all animations and make sure all properties are merged.\n$tribar-default-transition-properties: $tribar-global-transition-properties !default;\n$tribar-default-transition-properties: map-merge($tribar-global-transition-properties, $tribar-default-transition-properties);\n\n\n// Mixins\n// ======\n\n// Parts\n// =====\n\n// Tribar Parts\n// ------------\n// - Outputs all tribar parts.\n// - @param void\n@mixin tribar-parts {\n    &, &:before, &:after {\n        @content;\n    }\n}\n\n// Tribar Top\n// ----------\n// - Outputs tribar top part.\n// - @param void\n@mixin tribar-top {\n    &:before {\n        @content;\n    }\n}\n\n// Tribar Middle\n// -------------\n// - Outputs tribar middle part.\n// - @param void\n@mixin tribar-middle {\n    & {\n        @content;\n    }\n}\n\n// Tribar Bottom\n// -------------\n// - Outputs tribar bottom part.\n// - @param void\n@mixin tribar-bottom {\n    &:after {\n        @content;\n    }\n}\n\n// Tribar Edge\n// -----------\n// - Outputs tribar top and bottom part.\n// - @param void\n@mixin tribar-edge {\n    &:before, &:after {\n        @content;\n    }\n}\n\n\n// Tribar\n// ======\n\n// Set Tribar\n// ----------\n// - Outputs the prefixed tribar transform property.\n// - @param map $options\n@mixin tribar-set($options: ()) {\n    $options: map-extend($tribar-default-properties, $options, true);\n\n    $transform: str-transforms($options);\n\n    @include transform-set($options);\n}\n\n\n// Transform\n// =========\n\n// Set Transform\n// -------------\n// - Outputs the prefixed tribar transform property.\n// - @param map $options\n@mixin transform-set($options: ()) {\n    $options: map-extend($tribar-default-transform-properties, $options, true);\n\n    $transform: str-transforms($options);\n\n    -webkit-transform: $transform;\n    -ms-transform: $transform;\n    transform: $transform;\n}\n\n// Transition\n// ==========\n\n// Set Transition\n// --------------\n// - Outputs the prefixed tribar transition property.\n// - @param map $options\n@mixin transition-set($options: ()) {\n    $options: map-extend($tribar-default-transition-properties, $options, true);\n\n    $transition: str-transitions($options);\n\n    -webkit-transition: $transition;\n    -ms-transition: $transition;\n    transition: $transition;\n}\n","// Haleks — Tribar\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Tribar\n// ======\n@import '../core/global';\n\n// Class\n// -----\n$tribar-include-tribar-class: $tribar-include-class !default;\n\n// Properties\n// ----------\n$tribar-properties: $tribar-default-properties !default;\n$tribar-properties: map-extend($tribar-default-properties, $tribar-properties, true);\n\n// Tribar\n// ------\n// - The tribar mixins\n// - @param map $options\n@mixin tribar($options: ()) {\n\t$options: map-extend($tribar-properties, $options, true);\n\n\t@include tribar-parts {\n\t\twidth: map-get($options, 'width');\n\t\theight: map-get($options, 'thickness');\n\t\tmax-height: map-get($options, 'thickness');\n\n\t\tbackground-color: map-get($options, 'color');\n\n\t\tborder: 0px solid transparent;\n\t    border-radius: map-get($options, 'radius');\n\n\t\tbox-shadow: map-get($options, 'shadow');\n\n\t\t@include transition-set(map-get($options, 'transition'));\n\t}\n\n\t@include tribar-middle {\n\t\tmargin-top: map-get($options, 'thickness') + map-get($options, 'gutter');\n        margin-bottom: map-get($options, 'thickness') + map-get($options, 'gutter');\n\t}\n\n\t@include tribar-edge {\n\t\tposition: absolute;\n\t\tcontent: '';\n\t}\n\n\t@include tribar-top {\n\t\ttop: -(map-get($options, 'thickness') + map-get($options, 'gutter'));\n\t}\n\n\t@include tribar-bottom {\n\t\ttop: map-get($options, 'thickness') + map-get($options, 'gutter');\n\t}\n}\n\n// Export\n// ------\n@include exports('tribar') {\n\t@if $tribar-include-tribar-class {\n        .tribar {\n            @include tribar();\n        }\n\t}\n}\n","// Haleks — Tribar\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Functions\n// =========\n\n// Import\n// ------\n$vitalize-components: () !default;\n\n@mixin exports($name) {\n    // Import from global scope\n    $vitalize-components: $vitalize-components !global;\n\n    // Check if a module is already on the list\n    $module_index: index($vitalize-components, $name);\n    @if (($module_index == null) or ($module_index == false)) {\n        $vitalize-components: append($vitalize-components, $name) !global;\n        @content;\n    }\n}\n\n// Map\n// ===\n\n// Map Deep Get\n// ------------\n// - Return the value from a deep nested map.\n// - @param map $map\n// - @param arglist $keys\n// - @return map\n@function map-deep-get($map, $keys...) {\n    $return: $map;\n\n    @each $key in $keys {\n        @if type-of($return) == map {\n            $return: map-get($return, $key);\n        }\n    }\n\n    @return $return;\n}\n\n// Map Deep Set\n// ------------\n// - Set a value to deep nested map.\n// - @param map $map\n// - @param arglist $keys\n// - @param string $value\n// - @return map\n@function map-deep-set($map, $keys.../*, $value */) {\n    $list: ($map,);\n    $result: null;\n\n    @if length($keys) == 2 {\n        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));\n    }\n\n    @for $i from 1 through length($keys) - 2 {\n        $list: append($list, map-get(nth($list, -1), nth($keys, $i)));\n    }\n\n    @for $i from length($list) through 1 {\n        $result: map-merge(nth($list, $i), (nth($keys, $i): if($i == length($list), nth($keys, -1), $result)));\n    }\n\n    @return $result;\n}\n\n// Map Has Key\n// -----------\n// - Return true if a deep key exists.\n// - @param map $map\n// - @param arglist $keys\n// - @return bool\n@function map-has-keys($map, $keys...) {\n    @each $key in $keys {\n        @if not map-has-key($map, $key) {\n            @return false;\n        }\n    }\n\n    @return true;\n}\n\n// Map Has Nested Keys\n// -------------------\n// - Return true if map got all '$keys' nested with each others.\n// - @param map $map\n// - @param arglist $keys\n// - @return bool\n@function map-has-nested-keys($map, $keys...) {\n    @each $key in $keys {\n        @if not map-has-key($map, $key) {\n            @return false;\n        }\n\n        $map: map-get($map, $key);\n    }\n\n    @return true;\n}\n\n// Map Depth\n// ---------\n// - Return the level of depth the map has.\n// - @param map $map\n// - @return int\n@function map-depth($map) {\n    $level: 1;\n\n    @each $key, $value in $map {\n        @if type-of($value) == map {\n            $level: max(map-depth($value) + 1, $level);\n        }\n    }\n\n    @return $level;\n}\n\n// Map Extend\n// ----------\n// - Return a merged map of 2 or more maps\n// - @param map $map\n// - @param arglist $maps\n// - @param bool $deep\n// - @return map\n@function map-extend($map, $maps.../*, $deep */) {\n    $last: nth($maps, -1);\n    $deep: $last == true;\n    $max: if($deep, length($maps) - 1, length($maps));\n\n    @for $i from 1 through $max {\n        $current: nth($maps, $i);\n\n        @if not $deep {\n            $map: map-merge($map, $current);\n        } @else {\n            @each $key, $value in $current {\n                @if type-of($value) == map and type-of(map-get($map, $key)) == map {\n                    $value: map-extend(map-get($map, $key), $value, true);\n                }\n\n                $map: map-merge($map, ($key: $value));\n            }\n        }\n    }\n\n    @return $map;\n}\n\n// Map Zip\n// -------\n// - Return a map with merged lists of keys and values.\n// - @param list $keys\n// - @param list $values\n// - @return map\n@function map-zip($keys, $values) {\n    $length-keys: length($keys);\n    $length-values: length($values);\n    $min: min($length-keys, $length-values);\n    $map: ();\n\n    @if $length-keys != $length-values {\n        @warn 'There are #{$length-keys} key(s) for #{$length-values} value(s) in the map for \\'map-zip\\'. '\n              + 'Resulting map will only have #{$min} pairs.';\n    }\n\n    @if $min == 0 {\n        @return $map;\n    }\n\n    @for $i from 1 through $min {\n        $map: map-merge($map, (nth($keys, $i): nth($values, $i)));\n    }\n\n    @return $map;\n}\n\n// Map Combine\n// -----------\n// - Return a map with combined lists of keys and values.\n// - @param list $keys\n// - @param list $values\n// - @return map\n@function map-combine($keys, $value) {\n    $length-keys: length($keys);\n    $map: ();\n\n    @if $length-keys == 0 {\n        @return $map;\n    }\n\n    @for $i from 1 through $length-keys {\n        $map: map-merge($map, (nth($keys, $i): $value));\n    }\n\n    @return $map;\n}\n\n\n// String\n// ======\n\n// String Replace\n// --------------\n// - Return a string with replaced character.\n// - @param string $string\n// - @param string $search\n// - @param string $replace\n// - @return string\n@function str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n\n    @if $index {\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n\n    @return $string;\n}\n\n// String Escape\n// -------------\n// - Return a string with escaped characters.\n// - @param string $string\n// - @return string\n@function str-escape($string) {\n    $escapees: ('\\\\', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '`', '{', '|', '}', '~');\n\n    @each $char in $escapees {\n        $string: str-replace($string, $char, '\\\\' + $char);\n    }\n\n    @return $string;\n}\n\n// String Append\n// -------------\n// - Return a string with appended substring.\n// - @param string $string\n// - @param string|list $substrings\n// - @param string $sperator\n// - @return string\n@function str-append($string, $substrings, $seperator: '') {\n    @if str-length($string) == 0 {\n        $seperator: '';\n    }\n\n    @if type-of($substrings) == string {\n        @return str-insert($string, $seperator + $substrings, str-length($string) + 1);\n    }\n\n    @each $substring in $substrings {\n        $string: $string + $seperator + $substring;\n    }\n\n    @return $string;\n}\n\n// String Transform\n// ----------------\n// - Outputs the transform property string.\n// - @param string $name\n// - @param string|number $value\n// - @return string\n@function str-transform($name, $value) {\n    @if $name == 'x' or $name == 'y' {\n        $name: 'translate' + to-upper-case(unquote($name));\n    }\n\n    @return $name + '(' + $value + ')';\n}\n\n// String Transforms\n// -----------------\n// - Outputs the transform properties string.\n// - @param map $options\n// - @return string\n@function str-transforms($options) {\n    $string: '';\n\n    @each $name, $value in $options {\n        @if not is-transform-initial($name, $value) {\n            $string: str-append($string, str-transform($name, $value), ' ');\n        }\n    }\n\n    @if $string != '' {\n        @return $string;\n    }\n\n    @return none;\n}\n\n// String Transition\n// -----------------\n// - Outputs the transition property string.\n// - @param map $transition\n// - @return string\n@function str-transition($transition) {\n    $properties: (\n        'property',\n        'duration',\n        'function',\n        'delay'\n    );\n    $string: '';\n\n    @each $property in $properties {\n        @if map-has-key($transition, $property) {\n            $string: str-append($string,  map-get($transition, $property), ' ');\n        }\n    }\n\n    @if $string != '' {\n        @return $string;\n    }\n\n    @return none;\n}\n\n// String Transitions\n// -----------------\n// - Outputs the transition properties string.\n// - @param list|map $transitions\n// - @return string\n@function str-transitions($transitions) {\n    $string: '';\n\n    @if type-of($transitions) != list {\n        $transitions: ($transitions,);\n    }\n\n    @each $transition in $transitions {\n        $string: str-append($string, str-transition($transition), ',');\n\n        @if $string == none {\n            @return none;\n        }\n    }\n\n    @return $string;\n}\n\n// Transform Initial Value\n// -----------------------\n// - Return true if the value is transform initial value.\n// - @param string $name\n// - @param string|number $value\n// - @return bool\n@function is-transform-initial($name, $value) {\n    $properties: (\n        'x': 0,\n        'translateX': 0,\n        'y': 0,\n        'translateY': 0,\n        'z': 0,\n        'translateZ': 0,\n        'scaleX': 1,\n        'scaleY': 1,\n        'scaleZ': 1,\n        'rotate': 0deg,\n        'perspective': 0,\n        'matrix': (0, 0, 0, 0, 0, 0),\n        'matrix3d': (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n    );\n\n    @each $property, $default in $properties {\n        @if $name == $property and $value == $default {\n            @return true;\n        }\n    }\n\n    @return false;\n}\n\n// Transform Initial Value\n// -----------------------\n// - Return true if the value is transform initial value.\n// - @param number $degrees\n// - @param bool $clockwise\n// - @return bool\n@function rotation-get($degrees, $clockwise: true) {\n    @if $clockwise {\n        @return #{$degrees}deg;\n    }\n\n    @return -#{$degrees}deg;\n}\n"]}